// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc620.Encodinator.subsystems;

import org.usfirst.frc620.Encodinator.RobotMap;
import org.usfirst.frc620.Encodinator.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 *
 */
public class DriveTrain extends PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController lefty = RobotMap.driveTrainLefty;
    SpeedController righty = RobotMap.driveTrainRighty;
    RobotDrive robotDrive21 = RobotMap.driveTrainRobotDrive21;
    Encoder encoderR = RobotMap.driveTrainEncoderR;
    Encoder encoderL = RobotMap.driveTrainEncoderL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Initialize your subsystem here
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("DriveTrain", 0.1, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("Drive Train", "PIDSubsystem Controller", getPIDController());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    public void setDrivePoint(double inches) {
        getPIDController().setSetpoint(inches);
        getPIDController().enable();
    }
    
    public void stahp() {
        getPIDController().disable();
    }
  
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        System.out.print("Encoder R: " + (encoderR.getDistance()) + " Encoder L: " + encoderL.getDistance());
         return  ((encoderR.getDistance()) + encoderL.getDistance()) /2 ;
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        System.out.println(" Motor: " + output);
        RobotMap.driveTrainRobotDrive21.tankDrive(output, output);
    }
}
